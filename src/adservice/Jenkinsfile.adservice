pipeline {
    agent any

    environment {
        REPO_URL = 'https://github.com/kapilkumaria/microservices-demo-sample.git' // Repository URL
        SONARQUBE_SERVER = 'sonarQube' // SonarQube server name configured in Jenkins
        SONARQUBE_URL = 'http://98.81.101.43:9000' // SonarQube server URL
        SONARQUBE_TOKEN = credentials('sonar-token') // SonarQube token stored in Jenkins
        SERVICE_NAME = 'adservice' // Specific service name for this Jenkinsfile
        PATH = "${PATH}:/opt/sonar-scanner/bin" // Add sonar-scanner path to Jenkins environment
    }

    stages {
        stage('Clone Repository') {
            steps {
                echo "Cloning the repository from ${REPO_URL} for ${SERVICE_NAME}"
                git url: "${REPO_URL}", branch: 'feature/jenkinsfile-adservice' // Clone specified branch
            }
        }

        stage('Build') {
            steps {
                echo "Building the Java project for ${SERVICE_NAME}"
                sh "mvn clean install" // Adjust this command if needed
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv('sonarQube') {

                        sh """
                            echo "Starting SonarQube Analysis for ${SERVICE_NAME}"
                            /opt/sonar-scanner/bin/sonar-scanner \\
                              -Dsonar.projectKey=${SERVICE_NAME} \\
                              -Dsonar.sources=. \\
                              -Dsonar.host.url=$SONARQUBE_URL \\
                              -Dsonar.login=$SONARQUBE_TOKEN
                        """
                    }
                }
           }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image for ${SERVICE_NAME}"
                sh """
                    docker build -t ${SERVICE_NAME}:latest .
                """
            }
        }

        stage('Update Kubernetes Manifest for ArgoCD') {
            steps {
                script {
                    def manifestFile = "kubernetes-manifests/adservice.yaml"
                    def newImageTag = "${ECR_REPO_MICROSERVICES}:${BUILD_NUMBER}"
                    
                    // Update the image tag in the manifest file
                    sh """
                        sed -i 's|image: .*|image: ${newImageTag}|g' ${manifestFile}
                    """
                    
                    // Commit and push the updated manifest file
                    withCredentials([string(credentialsId: 'GITHUB_TOKEN', variable: 'GITHUB_TOKEN')]) {
                        sh """
                            git config user.name "jenkins-bot"
                            git config user.email "jenkins-bot@yourdomain.com"
                            git add ${manifestFile}
                            git commit -m "Update image tag for ${SERVICE_NAME} to ${BUILD_NUMBER}"
                            
                            # Push using token-based authentication
                            git push https://jenkins-bot:${GITHUB_TOKEN}@github.com/kapilkumaria/microservices-demo-sample.git HEAD:feature/jenkinsfile-adservice
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully for ${SERVICE_NAME}!"
        }
        failure {
            echo "Pipeline failed for ${SERVICE_NAME}. Please check logs for details."
        }
    }
}

